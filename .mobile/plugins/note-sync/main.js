/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => NoteSyncPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian6 = require("obsidian");

// src/fseditor.ts
var import_obsidian = require("obsidian");
var FsEditor = class {
  constructor(plugin) {
    this.plugin = plugin;
    this.app = plugin.app;
    this.fs = plugin.app.vault.adapter.fs;
    this.path = plugin.app.vault.adapter.path;
  }
  get root() {
    let a = this.plugin.app.vault.adapter;
    return a.basePath.replace(/\\/g, "/");
  }
  get_tfile(path, only_first = true) {
    try {
      path = path.split("|")[0].replace("[[", "").replace("]]", "");
      let tfile = this.app.vault.getFileByPath(path);
      if (tfile) {
        return tfile;
      }
      let tfiles = this.app.metadataCache.uniqueFileLookup.get(path.toLowerCase());
      if (!tfiles) {
        tfiles = this.app.metadataCache.uniqueFileLookup.get(path.toLowerCase() + ".md");
        if (!tfiles) {
          return null;
        } else {
          path = path + ".md";
        }
      }
      let ctfiles = tfiles.filter((x) => x.name == path);
      if (ctfiles.length > 0) {
        if (only_first) {
          return ctfiles[0];
        } else {
          return ctfiles;
        }
      }
      if (tfiles.length > 0) {
        if (only_first) {
          return tfiles[0];
        } else {
          return tfiles;
        }
      }
      return null;
    } catch (e) {
      return null;
    }
  }
  get_inlinks(tfile, only_md = true) {
    if (tfile == null) {
      return [];
    }
    let res = [];
    let inlinks = this.app.metadataCache.getBacklinksForFile(tfile);
    for (let [k, v] of inlinks.data) {
      let curr = this.app.vault.getFileByPath(k);
      if (curr) {
        res.push(curr);
      }
    }
    return res;
  }
  get_outlinks(tfile, only_md = true) {
    if (tfile == null) {
      return [];
    }
    let mcache = this.app.metadataCache.getFileCache(tfile);
    if (!mcache) {
      return [];
    }
    let res = [];
    if (mcache.links) {
      for (let link of mcache.links) {
        let tfile2 = this.get_tfile(link.link);
        if (tfile2 && !res.contains(tfile2) && !(only_md && tfile2.extension != "md")) {
          res.push(tfile2);
        }
      }
    }
    if (mcache.frontmatterLinks) {
      for (let link of mcache.frontmatterLinks) {
        let tfile2 = this.get_tfile(link.link);
        if (tfile2 && !res.contains(tfile2) && !(only_md && tfile2.extension != "md")) {
          res.push(tfile2);
        }
      }
    }
    if (!only_md && mcache.embeds) {
      for (let link of mcache.embeds) {
        let tfile2 = this.get_tfile(link.link);
        if (tfile2 && !res.contains(tfile2)) {
          res.push(tfile2);
        }
      }
    }
    return res;
  }
  abspath(tfile) {
    if (tfile) {
      return (this.root + "/" + tfile.path).replace(/\\/g, "/");
    } else {
      return null;
    }
  }
  isfile(path) {
    return this.fs.existsSync(path) && this.fs.statSync(path).isFile();
  }
  isdir(path) {
    return this.fs.existsSync(path) && this.fs.statSync(path).isDirectory();
  }
  list_dir(path, as_fullpath = true) {
    if (!this.isdir(path)) {
      return [];
    }
    let items = this.fs.readdirSync(path);
    if (as_fullpath) {
      items = items.map(
        (x) => {
          return path + "/" + x;
        }
      );
    }
    return items;
  }
  first_valid_dir(paths) {
    if (typeof paths == "string") {
      if (this.isdir(paths)) {
        return paths;
      } else {
        return null;
      }
    }
    for (let path of paths) {
      if (this.isdir(path)) {
        return path;
      }
    }
    return null;
  }
  async select_valid_dir(paths, prompt_if_null = false) {
    let xpaths = paths.filter((p) => this.isdir(p));
    let path = null;
    if (xpaths.length > 0) {
      path = await this.plugin.dialog_suggest(xpaths, xpaths);
    }
    if (!path && prompt_if_null) {
      path = await this.plugin.dialog_prompt("Root of vault");
      if (!this.isdir(path)) {
        path = null;
      }
    }
    return path;
  }
  mkdir_recursive(path) {
    if (this.isdir(path)) {
      return true;
    }
    let parent = this.path.dirname(path);
    if (!this.isdir(parent)) {
      this.mkdir_recursive(parent);
    }
    this.fs.mkdirSync(path);
  }
  /**
  * 附件 src 到 dst，不在 vault 中，需要绝对路径
  * overwrite，复盖；mtime，新文件；
  */
  copy_file(src, dst, mode = "pass>overwrite>mtime") {
    let fs = this.fs;
    mode = mode.split(">")[0];
    if (!fs.existsSync(src)) {
      return false;
    }
    if (fs.existsSync(dst)) {
      if (mode === "overwrite") {
        fs.unlinkSync(dst);
        fs.copyFileSync(src, dst);
        return true;
      } else if (mode === "mtime") {
        if (fs.statSync(dst).mtimeMs < fs.statSync(src).mtimeMs) {
          fs.unlinkSync(dst);
          fs.copyFileSync(src, dst);
          return true;
        }
      }
    } else {
      fs.copyFileSync(src, dst);
      return true;
    }
    return false;
  }
  copy_tfile(tfile, dst, mode = "mtime") {
    if (tfile) {
      let src = this.abspath(tfile);
      return src && this.copy_file(src, dst, mode);
    }
    return false;
  }
  sync_tfile(tfile, vault_root, mode = "mtime", attachment = true, outlink = false) {
    if (tfile) {
      vault_root = vault_root.replace(/\\/g, "/");
      let src = this.root + "/" + tfile.path;
      let dst = vault_root + "/" + tfile.path;
      this.mkdir_recursive(this.path.dirname(dst));
      this.copy_file(src, dst, mode);
      if (attachment) {
        let tfiles = this.get_outlinks(tfile, false);
        for (let t of tfiles) {
          if (!(t.extension === "md")) {
            this.sync_tfile(t, vault_root, mode, false);
          } else if (outlink) {
            this.sync_tfile(t, vault_root, mode, false);
          }
        }
      }
    }
  }
  sync_tfolder(tfolder, vault_root, mode = "mtime", attachment = true, outlink = false, strict = false) {
    if (tfolder) {
      for (let t of tfolder.children) {
        if (t instanceof import_obsidian.TFolder) {
          this.sync_tfolder(t, vault_root, mode, attachment, outlink);
        } else if (t instanceof import_obsidian.TFile) {
          this.sync_tfile(t, vault_root, mode, attachment, outlink);
        }
      }
      if (strict) {
        let dst = vault_root + "/" + tfolder.path;
        let src = this.abspath(tfolder);
        if (src && dst) {
          this.remove_files_not_in_src(src, dst);
        }
      }
    }
  }
  delete_file_or_dir(path) {
    if (this.isfile(path)) {
      this.fs.unlinkSync(path);
    } else if (this.isdir(path)) {
      let items = this.list_dir(path, true);
      for (let item of items) {
        this.delete_file_or_dir(item);
      }
      this.fs.rmdirSync(path);
    }
  }
  remove_files_not_in_src(src, dst) {
    if (!this.isdir(src) || !this.isdir(dst)) {
      return;
    }
    let items = this.list_dir(dst, false);
    for (let item of items) {
      let adst = dst + "/" + item;
      let asrc = src + "/" + item;
      if (this.isfile(adst)) {
        if (!this.isfile(asrc)) {
          this.fs.unlinkSync(adst);
        }
      } else if (this.isdir(adst)) {
        if (!this.isdir(asrc)) {
          this.delete_file_or_dir(adst);
        } else {
          this.remove_files_not_in_src(asrc, adst);
        }
      }
    }
  }
  sync_folder(src, dst, mode = "mtime", strict = false) {
    if (!this.isdir(src)) {
      return;
    }
    this.mkdir_recursive(dst);
    if (!this.isdir(dst)) {
      return;
    }
    let items = this.list_dir(src, false);
    for (let item of items) {
      let asrc = this.path.join(src, item);
      let adst = this.path.join(dst, item);
      if (this.isfile(asrc)) {
        this.copy_file(asrc, adst, mode);
      } else if (this.isdir(asrc)) {
        this.sync_folder(asrc, adst, mode, strict);
      }
    }
    if (strict) {
      this.remove_files_not_in_src(src, dst);
    }
  }
  modify(path, callback, encoding = "utf8") {
    let fs = this.fs;
    if (!fs.existsSync(path)) {
      return;
    }
    ;
    fs.readFile(
      path,
      encoding,
      (err, data) => {
        if (err) {
          return;
        }
        let rs = callback(path, data);
        fs.writeFile(path, rs, encoding, (err2) => {
          return;
        });
      }
    );
  }
};

// src/strings.ts
var Strings = class {
  constructor() {
    let lang = window.localStorage.getItem("language");
    if (lang) {
      this.language = lang;
    } else {
      this.language = "en";
    }
  }
  get cmd_export_current_note() {
    if (this.language == "zh") {
      return "\u5BFC\u51FA\u5F53\u524D\u7B14\u8BB0";
    } else {
      return "Export current note";
    }
  }
  get cmd_set_vexporter() {
    if (this.language == "zh") {
      return "\u8BBE\u7F6E\u5BFC\u51FA\u7B14\u8BB0\u9009\u9879";
    } else {
      return "Set config to export note";
    }
  }
  get cmd_export_plugin() {
    if (this.language == "zh") {
      return "\u5BFC\u51FA\u63D2\u4EF6";
    } else {
      return "Export plugin";
    }
  }
  get prompt_path_of_folder() {
    if (this.language == "zh") {
      return "\u8F93\u5165\u6587\u4EF6\u5939\u8DEF\u5F84";
    } else {
      return "Input path of folder";
    }
  }
  get notice_output() {
    if (this.language == "zh") {
      return "\u5BFC\u51FA\uFF1A";
    } else {
      return "Output:";
    }
  }
  get notice_nosuchdir() {
    if (this.language == "zh") {
      return "\u65E0\u6548\u76EE\u5F55";
    } else {
      return "Invaid path.";
    }
  }
  get setting_vault_dir() {
    if (this.language == "zh") {
      return "\u5E93\u76EE\u5F55";
    } else {
      return "Root dir of vault";
    }
  }
  get setting_strict_mode() {
    if (this.language == "zh") {
      return "\u4E25\u683C\u6A21\u5F0F?";
    } else {
      return "Strict mode?";
    }
  }
  get setting_strict_mode_desc() {
    if (this.language == "zh") {
      return "\u5371\u9669\uFF01\u540C\u6B65\u65F6\u5220\u9664\u76EE\u6807\u5E93\u4E2D\u591A\u51FA\u7684\u6587\u4EF6";
    } else {
      return "Danger! Delet files or folders in target vault but not in current vault.";
    }
  }
  get item_copy_data_json() {
    if (this.language == "zh") {
      return "\u590D\u5236 data.json";
    } else {
      return "Copy data.json";
    }
  }
  get item_skip_data_json() {
    if (this.language == "zh") {
      return "\u8DF3\u8FC7 data.json";
    } else {
      return "Skip data.json";
    }
  }
  get item_sync_vault() {
    if (this.language == "zh") {
      return "\u540C\u6B65\u5230\u5176\u5B83\u5E93";
    } else {
      return "Sync to other vault";
    }
  }
};
var strings = new Strings();

// src/setting.ts
var import_obsidian2 = require("obsidian");
var DEFAULT_SETTINGS = {
  strict_mode: false,
  vaultDir: ""
};
var MySettingTab = class extends import_obsidian2.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  getSettingValue(field) {
    return this.plugin.settings[field];
  }
  add_toggle(name, desc, field) {
    let { containerEl } = this;
    let value = this.plugin.settings[field];
    let item = new import_obsidian2.Setting(containerEl).setName(name).setDesc(desc).addToggle(
      (text) => text.setValue(value).onChange(async (value2) => {
        this.plugin.settings[field] = value2;
        await this.plugin.saveSettings();
      })
    );
    return item;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian2.Setting(containerEl).setName(this.plugin.strings.setting_vault_dir).addTextArea((text) => text.setValue(this.plugin.settings.vaultDir).onChange(async (value) => {
      this.plugin.settings.vaultDir = value;
      await this.plugin.saveSettings();
    }));
    this.add_toggle(
      this.plugin.strings.setting_strict_mode,
      this.plugin.strings.setting_strict_mode_desc,
      "strict_mode"
    );
  }
};

// src/commands.ts
var import_obsidian3 = require("obsidian");
var cmd_export_current_note = (plugin) => ({
  id: "cmd_export_current_note",
  name: plugin.strings.cmd_export_current_note,
  callback: async () => {
    let tfile = plugin.app.workspace.getActiveFile();
    await plugin.export_readme(tfile, null);
  }
});
var cmd_set_vexporter = (plugin) => ({
  id: "cmd_set_vexporter",
  name: plugin.strings.cmd_set_vexporter,
  callback: async () => {
    let tfile = plugin.app.workspace.getActiveFile();
    if (!tfile) {
      return;
    }
    let dir = await plugin.dialog_prompt(plugin.strings.prompt_path_of_folder);
    let item = {};
    if (plugin.fsEditor.fs.existsSync(dir)) {
      item["Dir"] = dir;
    }
    item["Name"] = "readMe";
    item["Assets"] = "./assets";
    item["RemoveMeta"] = true;
    item["UseGitLink"] = true;
    await plugin.app.fileManager.processFrontMatter(
      tfile,
      async (fm) => {
        fm[plugin.yaml] = item;
      }
    );
  }
});
var cmd_export_plugin = (plugin) => ({
  id: "cmd_export_plugin",
  name: plugin.strings.cmd_export_plugin,
  callback: async () => {
    let plugins = Object.keys(plugin.app.plugins.plugins);
    let p = await plugin.dialog_suggest(plugins, plugins);
    let eplugin = plugin.app.plugins.getPlugin(p);
    if (eplugin) {
      let paths = plugin.settings.vaultDir.split("\n");
      let target = await plugin.fsEditor.select_valid_dir(
        paths
      );
      if (target) {
        let items2 = plugin.fsEditor.list_dir(target, false);
        items2 = items2.filter((x) => x.startsWith(".") && x != ".git").filter(
          (x) => {
            let path = plugin.fsEditor.path.join(target, x);
            if (!plugin.fsEditor.isdir(path)) {
              return false;
            }
            let items3 = plugin.fsEditor.list_dir(path, false);
            return items3.contains("plugins");
          }
        );
        if (items2.length == 1) {
          target = plugin.fsEditor.path.join(target, items2[0], "plugins");
        } else if (items2.length > 1) {
          let item = await plugin.dialog_suggest(
            items2,
            items2,
            "config"
          );
          if (item) {
            target = plugin.fsEditor.path.join(target, item, "plugins");
          }
        }
      }
      if (!plugin.fsEditor.fs.existsSync(target) || plugin.fsEditor.path.basename(target) != "plugins") {
        target = await plugin.dialog_prompt(plugin.strings.prompt_path_of_folder);
      }
      target = target.replace(/\\/g, "/");
      if (!target.endsWith("/" + p)) {
        target = target + "/" + p;
      }
      if (!plugin.fsEditor.fs.existsSync(target)) {
        plugin.fsEditor.fs.mkdirSync(target);
      }
      let items = ["main.js", "manifest.json", "styles.css"];
      let dj = await plugin.dialog_suggest(
        [plugin.strings.item_skip_data_json, plugin.strings.item_copy_data_json],
        [false, true],
        ""
      );
      if (dj) {
        items.push("data.json");
      }
      for (let item of items) {
        let src = `${plugin.fsEditor.root}/${eplugin.manifest.dir}/${item}`;
        let dst = `${target}/${item}`;
        let flag = plugin.fsEditor.copy_file(src, dst, "overwrite");
        if (flag) {
          new import_obsidian3.Notice(`Copy ${item} to ${target}`, 5e3);
        }
      }
    }
  }
});
var commandBuilders = [
  cmd_export_current_note,
  cmd_set_vexporter,
  cmd_export_plugin
];
var commandBuildersDesktop = [];
function addCommands(plugin) {
  commandBuilders.forEach((c) => {
    plugin.addCommand(c(plugin));
  });
  if (plugin.app.isMobile == false) {
    commandBuildersDesktop.forEach((c) => {
      plugin.addCommand(c(plugin));
    });
  }
}

// src/gui/inputSuggester.ts
var import_obsidian4 = require("obsidian");
var InputSuggester = class extends import_obsidian4.FuzzySuggestModal {
  constructor(app, displayItems, items, options = {}) {
    super(app);
    this.displayItems = displayItems;
    this.items = items;
    this.promise = new Promise((resolve, reject) => {
      this.resolvePromise = resolve;
      this.rejectPromise = reject;
    });
    this.inputEl.addEventListener("keydown", (event) => {
      var _a;
      if (event.code !== "Tab") {
        return;
      }
      const self = this;
      const { values, selectedItem } = self.chooser;
      const { value } = this.inputEl;
      this.inputEl.value = (_a = values[selectedItem].item) != null ? _a : value;
    });
    if (options.placeholder)
      this.setPlaceholder(options.placeholder);
    if (options.limit)
      this.limit = options.limit;
    if (options.emptyStateText)
      this.emptyStateText = options.emptyStateText;
    this.open();
  }
  static Suggest(app, displayItems, items, options = {}) {
    const newSuggester = new InputSuggester(
      app,
      displayItems,
      items,
      options
    );
    return newSuggester.promise;
  }
  getItemText(item) {
    if (item === this.inputEl.value)
      return item;
    return this.displayItems[this.items.indexOf(item)];
  }
  getItems() {
    if (this.inputEl.value === "")
      return this.items;
    return [this.inputEl.value, ...this.items];
  }
  selectSuggestion(value, evt) {
    this.resolved = true;
    super.selectSuggestion(value, evt);
  }
  onChooseItem(item, evt) {
    this.resolved = true;
    this.resolvePromise(item);
  }
  onClose() {
    super.onClose();
    if (!this.resolved)
      this.rejectPromise("no input given.");
  }
};
async function dialog_suggest(displayItems, items, placeholder = "") {
  try {
    return await InputSuggester.Suggest(
      this.app,
      displayItems,
      items,
      {
        placeholder
      }
    );
  } catch (error) {
    return null;
  }
}

// src/gui/inputPrompt.ts
var import_obsidian5 = require("obsidian");
var InputPrompt = class extends import_obsidian5.Modal {
  constructor(app, header, placeholder, value) {
    super(app);
    this.header = header;
    this.didSubmit = false;
    this.submitClickCallback = (evt) => this.submit();
    this.cancelClickCallback = (evt) => this.cancel();
    this.submitEnterCallback = (evt) => {
      if (!evt.isComposing && evt.key === "Enter") {
        evt.preventDefault();
        this.submit();
      }
    };
    this.placeholder = placeholder != null ? placeholder : "";
    this.input = value != null ? value : "";
    this.waitForClose = new Promise((resolve, reject) => {
      this.resolvePromise = resolve;
      this.rejectPromise = reject;
    });
    this.display();
    this.open();
  }
  static Prompt(app, header, placeholder, value) {
    const newPromptModal = new InputPrompt(
      app,
      header,
      placeholder,
      value
    );
    return newPromptModal.waitForClose;
  }
  display() {
    this.containerEl.addClass("quickAddModal", "qaInputPrompt");
    this.contentEl.empty();
    this.titleEl.textContent = this.header;
    const mainContentContainer = this.contentEl.createDiv();
    this.inputComponent = this.createInputField(
      mainContentContainer,
      this.placeholder,
      this.input
    );
    this.createButtonBar(mainContentContainer);
  }
  createInputField(container, placeholder, value) {
    const textComponent = new import_obsidian5.TextComponent(container);
    textComponent.inputEl.style.width = "100%";
    textComponent.setPlaceholder(placeholder != null ? placeholder : "").setValue(value != null ? value : "").onChange((value2) => this.input = value2).inputEl.addEventListener("keydown", this.submitEnterCallback);
    return textComponent;
  }
  createButton(container, text, callback) {
    const btn = new import_obsidian5.ButtonComponent(container);
    btn.setButtonText(text).onClick(callback);
    return btn;
  }
  createButtonBar(mainContentContainer) {
    const buttonBarContainer = mainContentContainer.createDiv();
    this.createButton(
      buttonBarContainer,
      "Ok",
      this.submitClickCallback
    ).setCta().buttonEl.style.marginRight = "0";
    this.createButton(
      buttonBarContainer,
      "Cancel",
      this.cancelClickCallback
    );
    buttonBarContainer.style.display = "flex";
    buttonBarContainer.style.flexDirection = "row-reverse";
    buttonBarContainer.style.justifyContent = "flex-start";
    buttonBarContainer.style.marginTop = "1rem";
    buttonBarContainer.style.gap = "0.5rem";
  }
  submit() {
    this.didSubmit = true;
    this.close();
  }
  cancel() {
    this.close();
  }
  resolveInput() {
    if (!this.didSubmit)
      this.rejectPromise("No input given.");
    else
      this.resolvePromise(this.input);
  }
  removeInputListener() {
    this.inputComponent.inputEl.removeEventListener(
      "keydown",
      this.submitEnterCallback
    );
  }
  onOpen() {
    super.onOpen();
    this.inputComponent.inputEl.focus();
    this.inputComponent.inputEl.select();
  }
  onClose() {
    super.onClose();
    this.resolveInput();
    this.removeInputListener();
  }
};
async function dialog_prompt(header = "Input", placeholder = "", value = "") {
  try {
    return await InputPrompt.Prompt(
      this.app,
      header,
      placeholder,
      value
    );
  } catch (e) {
    return null;
  }
}

// main.ts
var NoteSyncPlugin = class extends import_obsidian6.Plugin {
  async onload() {
    this.dialog_suggest = dialog_suggest;
    this.dialog_prompt = dialog_prompt;
    this.app.workspace.onLayoutReady(
      async () => {
        await this._onload_();
      }
    );
  }
  async _onload_() {
    this.yaml = "note-sync";
    this.strings = new Strings();
    await this.loadSettings();
    this.fsEditor = new FsEditor(this);
    this.addSettingTab(new MySettingTab(this.app, this));
    addCommands(this);
    this.registerEvent(
      this.app.workspace.on("file-menu", (menu, file) => {
        menu.addItem((item) => {
          item.setTitle(this.strings.item_sync_vault).setIcon("document").onClick(async () => {
            let dst = await this.fsEditor.select_valid_dir(
              this.settings.vaultDir.split("\n")
            );
            if (!dst) {
              dst = await this.dialog_prompt("Root of vault");
              if (!this.fsEditor.isdir(dst)) {
                new import_obsidian6.Notice("Invalid root: " + dst);
                return;
              }
            }
            if (file instanceof import_obsidian6.TFile) {
              this.fsEditor.sync_tfile(file, dst, "mtime", true, false);
            } else if (file instanceof import_obsidian6.TFolder) {
              this.fsEditor.sync_tfolder(file, dst, "mtime", true, false);
            }
          });
        });
      })
    );
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  async export_readme(tfile, dst) {
    if (!tfile) {
      tfile = this.app.workspace.getActiveFile();
    }
    if (!tfile) {
      return;
    }
    await this.app.fileManager.processFrontMatter(
      tfile,
      async (fm) => {
        var _a, _b, _c, _d, _e;
        if (!tfile) {
          return;
        }
        if (!dst) {
          dst = (_a = fm[this.yaml]) == null ? void 0 : _a.Dir;
          if (!dst) {
            dst = await this.dialog_prompt("Path of LocalGitProject");
          }
        }
        if (!dst || !this.fsEditor.isdir(dst)) {
          new import_obsidian6.Notice(this.strings.notice_nosuchdir, 3e3);
          return;
        }
        dst = dst.replace(/\\/g, "/");
        let target;
        let name = (_b = fm[this.yaml]) == null ? void 0 : _b.Name;
        if (name && !(name == "")) {
          target = dst + "/" + name + ".md";
        } else {
          target = dst + "/" + tfile.basename + ".md";
        }
        let data = await this.app.vault.cachedRead(tfile);
        if ((_c = fm[this.yaml]) == null ? void 0 : _c.RemoveMeta) {
          data = data.replace(
            /---[\n(\r\n)][\s\S]*?---[\n(\r\n)]/,
            ""
          );
        }
        let assets = (_d = fm[this.yaml]) == null ? void 0 : _d.Assets;
        if (((_e = fm[this.yaml]) == null ? void 0 : _e.UseGitLink) && assets) {
          data = data.replace(
            /\!\[\[(.*?)\]\]/g,
            (match, name2) => {
              return `![${name2}](${assets}/${name2.replace(/ /g, "%20")})`;
            }
          );
        }
        await this.fsEditor.fs.writeFile(
          target,
          data,
          "utf-8",
          (err) => {
            return;
          }
        );
        new import_obsidian6.Notice(`Export to ${target}`, 5e3);
        if (assets) {
          let olinks = this.fsEditor.get_outlinks(tfile, false);
          let adir = this.fsEditor.path.join(dst, assets);
          this.fsEditor.mkdir_recursive(adir);
          for (let f of olinks) {
            if (!(f.extension === "md")) {
              let flag = this.fsEditor.copy_tfile(f, adir + "/" + f.basename + "." + f.extension);
              if (flag) {
                new import_obsidian6.Notice(`Copy ${f.name}`, 5e3);
              }
            }
          }
        }
      }
    );
  }
};
//# sourceMappingURL=data:application/json;base64,
